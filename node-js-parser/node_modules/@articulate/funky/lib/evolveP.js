var compose   = require('ramda/src/compose')
var composeP  = require('ramda/src/composeP')
var fromPairs = require('ramda/src/fromPairs')
var identity  = require('ramda/src/identity')
var pair      = require('ramda/src/pair')
var toPairs   = require('ramda/src/toPairs')
var uncurryN  = require('ramda/src/uncurryN')

var mapP = require('./mapP')

// evolveP :: { k: (v -> Promise v) } -> { k: v } -> Promise { k: v }
var evolveP = function (transforms) {
  var transform = function (ref) {
    var key = ref[0];
    var val = ref[1];

    var xfrm = transforms[key]
    var type = typeof xfrm

    xfrm = type === 'function'
      ? xfrm
      : xfrm && type === 'object'
        ? _evolveP(xfrm)
        : identity

    return Promise.resolve(val)
      .then(xfrm)
      .then(pair(key))
  }

  return compose(composeP(fromPairs, mapP(transform)), toPairs)
}

var _evolveP = module.exports = uncurryN(2, evolveP)
