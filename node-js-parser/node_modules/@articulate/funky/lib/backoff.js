var apply  = require('ramda/src/apply')
var curry  = require('ramda/src/curry')
var ifElse = require('ramda/src/ifElse')
var T      = require('ramda/src/T')

var reject = Promise.reject.bind(Promise)

// backoff :: { k: v } -> (a... -> Promise b) -> a... -> Promise b
var backoff = function (opts, f) {
  if ( opts === void 0 ) opts={};

  var base = opts.base; if ( base === void 0 ) base = 250;
  var tries = opts.tries; if ( tries === void 0 ) tries = 10;
  var when = opts.when; if ( when === void 0 ) when = T;

  var backedOff = function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var attempt = 0

    var retry = function () { return new Promise(function (res, rej) {
        setTimeout(function () {
          run().then(res, rej)
        }, delay(base, attempt))
      }); }

    var run = function () { return Promise.resolve(args)
        .then(apply(f))
        .catch(ifElse(when, tryAgain, reject)); }

    var tryAgain = function (err) { return ++attempt < tries ? retry() : reject(err); }

    return run()
  }

  return backedOff
}

var delay = function (base, attempt) { return attempt && randBetween(0, base * Math.pow(2, attempt)); }

var randBetween = function (lo, hi) { return lo + Math.random() * (hi - lo); }

module.exports = curry(backoff)
