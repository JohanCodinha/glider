var curry = require('ramda/src/curry')
var map   = require('ramda/src/map')

var mapArrayP = function (f, list) { return Promise.all(map(f, list)); }

var mapObjectP = function (f, list) {
  var result = {}
  var promises = []

  var loop = function ( key ) {
    var p = f(list[key]).then(function (val) { result[key] = val })
    promises.push(p)
  };

  for (var key in list) loop( key );

  return Promise.all(promises).then(function () { return result; })
}

// mapP :: Functor f => (a -> Promise b) -> f a -> Promise f b
var mapP = function (f, list) {
  switch (Object.prototype.toString.call(list)) {
    case '[object Object]':
      return mapObjectP(f, list)

    default:
      return mapArrayP(f, list)
  }
}

module.exports = curry(mapP)
