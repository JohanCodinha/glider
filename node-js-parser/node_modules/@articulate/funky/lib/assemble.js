var map    = require('ramda/src/map')
var doAssemble = require('./lib/doAssemble')

// assemble :: { k: ((...v) -> v) } -> (...v) -> { k: v }
var assemble = function (xfrms) {
  var x = [], len = arguments.length - 1;
  while ( len-- > 0 ) x[ len ] = arguments[ len + 1 ];

  var transform = function (xfrm) {
    var type = typeof xfrm
    return type === 'function'
      ? xfrm.apply(void 0, x)
      : xfrm && type === 'object'
        ? assemble.apply(void 0, [ xfrm ].concat( x ))
        : xfrm
  }

  return map(transform, xfrms)
}

module.exports = doAssemble(assemble)
